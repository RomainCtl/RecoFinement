{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"Advise.ly is a French company based in Lannion and created in 2020. Our team is composed of six engineers specialized in data processing. At Advise.ly, we work together to design, create and produce work that we are proud of for people that we believe in. We help other companies by providing them tailored recommendation systems. We are specialized in developing recommendation software systems. However, our background allows us to diversify our activities with consulting. We make every effort to satisfy our clients as much as possible. Advise.ly has two main activities, the first one is providing support to companies regarding applications development. And the second is research and development of new solutions. Key dates January 2020 : Company creation February 2020 : First project - Classified Government Project June 2020 : Second project - LeaveManager September 2020 : Third project : Recofinement Geographic location Our company is based at ENSSAT in Lannion (22), more precisely in the business incubator area. The address of Advise.ly is 6 rue de Kerampont, CS 80518, 22305 Lannion. Our team BOSQUET Corentin: Software & design engineer CHANTREL Romain: Project manager, Software & data analyst engineer GALLIOU Quentin: Cybersecurity engineer PERROT Yohan: Research engineer ROLLIN Lucas: Communication manager & software engineer","title":"About us"},{"location":"about/#key-dates","text":"January 2020 : Company creation February 2020 : First project - Classified Government Project June 2020 : Second project - LeaveManager September 2020 : Third project : Recofinement","title":"Key dates"},{"location":"about/#geographic-location","text":"Our company is based at ENSSAT in Lannion (22), more precisely in the business incubator area. The address of Advise.ly is 6 rue de Kerampont, CS 80518, 22305 Lannion.","title":"Geographic location"},{"location":"about/#our-team","text":"BOSQUET Corentin: Software & design engineer CHANTREL Romain: Project manager, Software & data analyst engineer GALLIOU Quentin: Cybersecurity engineer PERROT Yohan: Research engineer ROLLIN Lucas: Communication manager & software engineer","title":"Our team"},{"location":"developers/","text":"Summary The purpose of this part of the documentation is to explain how to install the application, to describe how it works and its architecture. We will also describe the data that we have recovered to make recommendations and the sources. We will describe the services we use as well as the services we have put in place. And finally, we will describe how we store our data, and we will present some diagrams to make it clearer. Go in Installation part if you want to install this project. Go in Data sources part if you want to see where we find our data, and to have some numbers about it. Go in Architecture part if you want to know how Recofinement as a whole works. Go in Application services part if you want to learn more about each service in the application. Go in External services part if you want to find out which services Recofinement uses. Go in Database part if you want to understand how Recofinement stores data. A search bar (top right) allows you to search for specific information in this documentation. To facilitate your reading, it is possible to make the images bigger by clicking on them.","title":"Home"},{"location":"developers/architecture/","text":"We use a micro-service architecture. Nginx service is our reverse proxy. All requests to access the application go through here. UI service is the entrance door for users, it is the interface that will allow them to use the entire application. API service is the BackEnd. It is the brain of the application, responsible for managing user access and actions. Engine service is the one who calculates the recommendations for the users. These two diagrams below can help you to understand how these services are organised. Macro architecture Functional macro architecture Tip You will find more information about each services on their owns pages.","title":"Architecture"},{"location":"developers/architecture/#macro-architecture","text":"","title":"Macro architecture"},{"location":"developers/architecture/#functional-macro-architecture","text":"Tip You will find more information about each services on their owns pages.","title":"Functional macro architecture"},{"location":"developers/database/","text":"Important We use PostgreSQL as DBMS (Data Base Management System) . You will find more information about it here . Media object definitions Application Name Type Description app_id Integer Application identifier name String Application name categorie Integer linked categorie ( genre ) rating Float Average of user ratings reviews String Number of reviews size String Application size installs String Number of installations by unique users type String 'Paid' or 'Free' price String Price content_rating String application classification (by age group) last_updated String last update date current_version String current app version number android_version String minimum android version required cover String cover url popularity_score Float popularity score (see here ) Important Unlike other media, applications are linked to only one genre. Book Name Type Description isbn String Book universal identifier title String Book title author String Book author year_of_publication Integer Year of publication publisher String Publisher company image_url_s String URL for small image size image_url_m String URL for medium image size image_url_l String URL for large image size rating Float Average rating rating_count Integer Number of user ratings popularity_score Float popularity score (see here ) Episode Name Type Description episode_id Integer Episode identifier imdbid String IMDB identifier title String year Integer release year genres String List of genres serie_id Integer Serie identifier season_number Integer episode_number Integer rating Float Average rating rating_count Integer Number of user ratings Game Name Type Description game_id Integer Game identifier steamid Integer Steam game identifier name String Game name short_description Text header_image String website String URL of official game website developers String developers company name publishers String publisher company name price String recommendations Integer Number of user recommendations release_date String rating Float Average rating rating_count Integer Number of user ratings popularity_score Float popularity score (see here ) Movie Name Type Description movie_id Integer Movie identifier title String Movie title language String Main language actors String List of main actors separated by '|' year String Release year producers String List of producers separated by '|' director String Name of the director writer String Name of the writer imdbid String IMDB movie identifier tmdbid String TMDB movie identifier rating Float Average rating rating_count Integer Number of user ratings cover String Cover url plot_outline String synopsis popularity_score Float popularity score (see here ) Series Name Type Description serie_id Integer Serie identifier imdbid String IMDB identifier title String start_year Integer end_year Integer writers Text List of writers separated by ',' directors Text List of directors separated by ',' actors Text List of actors separated by ',' rating Float Average rating rating_count Integer Number of user ratings cover String Cover url plot_outline String synopsis popularity_score Float popularity score (see here ) Track Name Type Description track_id Integer Track identifier title String Track title year Integer Release year artist_name String Artist name release String Realse (album) associated with this track track_mmid String Million Song track identifier recording_mbid UUID MusicBrainz track identifier rating Float Average rating rating_count Integer Number of user ratings spotify_id String Track spotify id covert_art_url Text popularity_score Float popularity score (see here ) Other objects definition Genre Name Type Description genre_id Integer Genre identifier name String genre name count Integer number of user content_type Enum APPLICATION, BOOK, GAME, MOVIE, SERIE or TRACK Group Name Type Description group_id Integer Group identifier name String Group name owner_id Integer User identifier User Name Type Description user_id Integer User internal identifier uuid UUID User public identifier email String user email username String password_hash String Hashed user password (Bycrypt algorithm) preferences_defined Boolean External Name Type Description service_id Integer Service internal identifier user_id Integer User identifier service_name String access_token String refresh_token String Schema User - Content relationship All content is linked with users by meta_user_X table, it will define all metadata between a content and the user: Example: Explicit metadata: rating Implicit metadata: play_count Content similarity All content tables have a \"Many to many\" relationship with itself, it stores the ratio of similarity between two contents (only the highest will be stored). Content genres Caution We do not have any data allowing us to define the genre of a book . The applications we have are linked to only one genre. User social part A user can create a group, and add other users to this group, the objective is to be able to make recommendations to the group (e.g. Playlist for a party with friends). User Interests A user can like or not a genre. Content Recommendation for users All recommendations calculated by Recofinement-engine are stored in this table. This service uses multiple algorithms (called engine) to recommend a user. Each engine calculates a score between 0 and 1 between a user and a content. The closer the score is to 1, the more relevant it will be. Important It is not relevant to compare scores between two different engines. That's why we have a column engine_priority Content Recommendation for groups The mechanism for the recommendation for a group is the same. We see a group object as a user object.","title":"Database"},{"location":"developers/database/#media-object-definitions","text":"","title":"Media object definitions"},{"location":"developers/database/#application","text":"Name Type Description app_id Integer Application identifier name String Application name categorie Integer linked categorie ( genre ) rating Float Average of user ratings reviews String Number of reviews size String Application size installs String Number of installations by unique users type String 'Paid' or 'Free' price String Price content_rating String application classification (by age group) last_updated String last update date current_version String current app version number android_version String minimum android version required cover String cover url popularity_score Float popularity score (see here ) Important Unlike other media, applications are linked to only one genre.","title":"Application"},{"location":"developers/database/#book","text":"Name Type Description isbn String Book universal identifier title String Book title author String Book author year_of_publication Integer Year of publication publisher String Publisher company image_url_s String URL for small image size image_url_m String URL for medium image size image_url_l String URL for large image size rating Float Average rating rating_count Integer Number of user ratings popularity_score Float popularity score (see here )","title":"Book"},{"location":"developers/database/#episode","text":"Name Type Description episode_id Integer Episode identifier imdbid String IMDB identifier title String year Integer release year genres String List of genres serie_id Integer Serie identifier season_number Integer episode_number Integer rating Float Average rating rating_count Integer Number of user ratings","title":"Episode"},{"location":"developers/database/#game","text":"Name Type Description game_id Integer Game identifier steamid Integer Steam game identifier name String Game name short_description Text header_image String website String URL of official game website developers String developers company name publishers String publisher company name price String recommendations Integer Number of user recommendations release_date String rating Float Average rating rating_count Integer Number of user ratings popularity_score Float popularity score (see here )","title":"Game"},{"location":"developers/database/#movie","text":"Name Type Description movie_id Integer Movie identifier title String Movie title language String Main language actors String List of main actors separated by '|' year String Release year producers String List of producers separated by '|' director String Name of the director writer String Name of the writer imdbid String IMDB movie identifier tmdbid String TMDB movie identifier rating Float Average rating rating_count Integer Number of user ratings cover String Cover url plot_outline String synopsis popularity_score Float popularity score (see here )","title":"Movie"},{"location":"developers/database/#series","text":"Name Type Description serie_id Integer Serie identifier imdbid String IMDB identifier title String start_year Integer end_year Integer writers Text List of writers separated by ',' directors Text List of directors separated by ',' actors Text List of actors separated by ',' rating Float Average rating rating_count Integer Number of user ratings cover String Cover url plot_outline String synopsis popularity_score Float popularity score (see here )","title":"Series"},{"location":"developers/database/#track","text":"Name Type Description track_id Integer Track identifier title String Track title year Integer Release year artist_name String Artist name release String Realse (album) associated with this track track_mmid String Million Song track identifier recording_mbid UUID MusicBrainz track identifier rating Float Average rating rating_count Integer Number of user ratings spotify_id String Track spotify id covert_art_url Text popularity_score Float popularity score (see here )","title":"Track"},{"location":"developers/database/#other-objects-definition","text":"","title":"Other objects definition"},{"location":"developers/database/#genre","text":"Name Type Description genre_id Integer Genre identifier name String genre name count Integer number of user content_type Enum APPLICATION, BOOK, GAME, MOVIE, SERIE or TRACK","title":"Genre"},{"location":"developers/database/#group","text":"Name Type Description group_id Integer Group identifier name String Group name owner_id Integer User identifier","title":"Group"},{"location":"developers/database/#user","text":"Name Type Description user_id Integer User internal identifier uuid UUID User public identifier email String user email username String password_hash String Hashed user password (Bycrypt algorithm) preferences_defined Boolean","title":"User"},{"location":"developers/database/#external","text":"Name Type Description service_id Integer Service internal identifier user_id Integer User identifier service_name String access_token String refresh_token String","title":"External"},{"location":"developers/database/#schema","text":"","title":"Schema"},{"location":"developers/database/#user-content-relationship","text":"All content is linked with users by meta_user_X table, it will define all metadata between a content and the user: Example: Explicit metadata: rating Implicit metadata: play_count","title":"User - Content relationship"},{"location":"developers/database/#content-similarity","text":"All content tables have a \"Many to many\" relationship with itself, it stores the ratio of similarity between two contents (only the highest will be stored).","title":"Content similarity"},{"location":"developers/database/#content-genres","text":"Caution We do not have any data allowing us to define the genre of a book . The applications we have are linked to only one genre.","title":"Content genres"},{"location":"developers/database/#user-social-part","text":"A user can create a group, and add other users to this group, the objective is to be able to make recommendations to the group (e.g. Playlist for a party with friends).","title":"User social part"},{"location":"developers/database/#user-interests","text":"A user can like or not a genre.","title":"User Interests"},{"location":"developers/database/#content-recommendation-for-users","text":"All recommendations calculated by Recofinement-engine are stored in this table. This service uses multiple algorithms (called engine) to recommend a user. Each engine calculates a score between 0 and 1 between a user and a content. The closer the score is to 1, the more relevant it will be. Important It is not relevant to compare scores between two different engines. That's why we have a column engine_priority","title":"Content Recommendation for users"},{"location":"developers/database/#content-recommendation-for-groups","text":"The mechanism for the recommendation for a group is the same. We see a group object as a user object.","title":"Content Recommendation for groups"},{"location":"developers/datasources/","text":"Info You can find all data source here Caution All user data has been anonymised. Some numbers Music 9 075 unique tracks 729 995 user - track - rating Movies 58 099 unique movies 27 753 445 user - movie - rating Serie 73 504 unique series 5 171 349 unique episodes 86 389 462 user - series - rating Games 5 154 unique games 128 793 user - game - played hours - purchase Books 271 380 unique books 1 031 176 user - book - rating Applications (mobile) 9 661 unique app 35 930 user - app - review - review popularity - review subjectivity - rating Content sources Music MusicBrainz Dataset : This data includes information about artists, release groups, releases, recordings, works, and labels, as well as the many relationships between them. Taste Profile (subset) : The dataset contains real user - play counts from undisclosed partners, all songs already matched to the MSD. LastFM (Implicit) (subset) : This dataset contains social networking, tagging, and music artist listening information from a set of 2K users from Last.fm online music system. Million Song Dataset (subset) : The Million Song Dataset is a freely-available collection of audio features and metadata for a million contemporary popular music tracks. Movies MovieLens : The data sets were collected over various periods of time, depending on the size of the set. TMDB : All movies and series metadata Serie TMDB : All movies and series metadata Games Steam video games Kaggle : This dataset is a list of user behaviors, with columns: user-id, game-title, behavior-name, value. The included behaviors are 'purchase' and 'play'. Steam app list : List of (appid, name) steam app. Steam open API : Api that provides application details from app_id. Books Book Crossing : The BookCrossing (BX) dataset was collected by Cai-Nicolas in a 4-week crawl (August / September 2004) from the Book-Crossing community Applications (mobile) Google play store (Kaggle)","title":"Data sources"},{"location":"developers/datasources/#some-numbers","text":"","title":"Some numbers"},{"location":"developers/datasources/#music","text":"9 075 unique tracks 729 995 user - track - rating","title":"Music"},{"location":"developers/datasources/#movies","text":"58 099 unique movies 27 753 445 user - movie - rating","title":"Movies"},{"location":"developers/datasources/#serie","text":"73 504 unique series 5 171 349 unique episodes 86 389 462 user - series - rating","title":"Serie"},{"location":"developers/datasources/#games","text":"5 154 unique games 128 793 user - game - played hours - purchase","title":"Games"},{"location":"developers/datasources/#books","text":"271 380 unique books 1 031 176 user - book - rating","title":"Books"},{"location":"developers/datasources/#applications-mobile","text":"9 661 unique app 35 930 user - app - review - review popularity - review subjectivity - rating","title":"Applications (mobile)"},{"location":"developers/datasources/#content-sources","text":"","title":"Content sources"},{"location":"developers/datasources/#music_1","text":"MusicBrainz Dataset : This data includes information about artists, release groups, releases, recordings, works, and labels, as well as the many relationships between them. Taste Profile (subset) : The dataset contains real user - play counts from undisclosed partners, all songs already matched to the MSD. LastFM (Implicit) (subset) : This dataset contains social networking, tagging, and music artist listening information from a set of 2K users from Last.fm online music system. Million Song Dataset (subset) : The Million Song Dataset is a freely-available collection of audio features and metadata for a million contemporary popular music tracks.","title":"Music"},{"location":"developers/datasources/#movies_1","text":"MovieLens : The data sets were collected over various periods of time, depending on the size of the set. TMDB : All movies and series metadata","title":"Movies"},{"location":"developers/datasources/#serie_1","text":"TMDB : All movies and series metadata","title":"Serie"},{"location":"developers/datasources/#games_1","text":"Steam video games Kaggle : This dataset is a list of user behaviors, with columns: user-id, game-title, behavior-name, value. The included behaviors are 'purchase' and 'play'. Steam app list : List of (appid, name) steam app. Steam open API : Api that provides application details from app_id.","title":"Games"},{"location":"developers/datasources/#books_1","text":"Book Crossing : The BookCrossing (BX) dataset was collected by Cai-Nicolas in a 4-week crawl (August / September 2004) from the Book-Crossing community","title":"Books"},{"location":"developers/datasources/#applications-mobile_1","text":"Google play store (Kaggle)","title":"Applications (mobile)"},{"location":"developers/installation/","text":"Important We have planned several installation methods for this project, it is nevertheless recommended using a Linux environment . Important It is recommended to have at least 20 GB of free space on your machine (The database takes up a little more than 11 GB). Production environment In a production environment, all you need is a docker. We advise you to use this environment in the following cases: To deploy the application on a server To test the application locally (in your computer) To contribute to the project To test services independently of the full application Development environment In a development environment, there will be several dependencies to install. We advise you to use this environment in the following cases: To contribute to the project with hot reloading If you want to access the database via an interface If you are on Windows and you don't want to use our solution: https://github.com/RomainCtl/vagrant_docker (more information in the guide) Requirements Production environment In order to be able to deploy, test or make changes to the application, you must have the necessary tools to run the application. make git & git lfs (Large File Storage) docker & docker-compose and that's all! Linux (Debian) make is normally installed by default. Install git and git-lfs : apt install git git-lfs git lfs install You can install docker simply with: apt install docker.io docker-compose Windows Download git from here and follow the instruction. Download git lfs from here and: git lfs install If you work on windows, I advise you to follow the instructions in this repository: https://github.com/RomainCtl/vagrant_docker So, each time you will use docker, you may start the vm ( make vm-up ). Note An Oracle VM Virtualbox will start and you will see it, you do not need to log on to it. The author of this repository chose to leave the VM window open to do not forget to switch it off before turning off the computer. Tip To use docker, do not forget to define the environment variables as the following: ./setenv-docker.bat . Mac For make , you will have to install the \"Developer Tools\" that are provided as optional packages in OS X installation disks. git is normally installed by default, try: git --version on your terminal, if it is not already installed, it will ask you to do so. Install git-lfs : brew install git-lfs git lfs install Docker Compose is installed as part of Docker for Mac . So you only have to install Docker for MAC. Development environment Warning This guide may not work on your environment, if this is the case, please refer to the official sites of the outbuildings. This guide is only intended to help you with the installation, but not with the configuration of the dependencies. In order to be able to make changes to the application or to access the database via an interface, you must have the necessary tools to run the application. make git & git lfs (Large File Storage) python >=3.8, pip and pipenv npm postgresql >=10 java >=11 Linux (Debian) make is normally installed by default. Install git and git-lfs : apt install git git-lfs git lfs install Python 3.8, pip & pipenv apt install python3.8 python3-pip python3 -m pip install pipenv Tip If you have more than one version of Python installed on your machine, the python3 command may execute a different version, See : https://jcutrer.com/linux/upgrade-python37-ubuntu1810 (taking into account the desired version). Npm apt install nodejs PostgreSQL apt install postgresql postgresql-client Java apt install openjdk-11-jre Windows Important We advise you to install: Choco , software management for windows Cmder , it is a command-line tool, it allows to replace advantageously cmd provided by default by Windows. Make choco install -y make Download git from here and follow the instruction. Download git lfs from here and: git lfs install Python3.8 https://www.python.org/downloads/windows/ , do not forget to tick the box \"add to path\". Npm, included with NodeJS https://nodejs.org/en/download/ PostgreSQL https://www.postgresql.org/download/ Java https://www.oracle.com/java/technologies/javase-jdk11-downloads.html Mac For make , you will have to install the \"Developer Tools\" that are provided as optional packages in OS X installation disks. git is normally installed by default, try: git --version on your terminal, if it is not already installed, it will ask you to do so. Install git-lfs : brew install git-lfs git lfs install Python 3.8 https://www.python.org/downloads/mac-osx/ Npm, included with NodeJS https://nodejs.org/en/download/ PostgreSQL https://www.postgresql.org/download/ Java https://www.oracle.com/java/technologies/javase-jdk11-downloads.html Clone project We use a micro-service architecture ( more information in this section ). We have a \"master project\" which has all services as sub-modules. Clone the \"master project\" and follow these commands: git clone https://github.com/RomainCtl/RecoFinement.git Imports git submodule (services) make init Import our data (may take some time depending on your internet connection) cd ./datas git lfs pull cd .. Environment variables In order to run correctly, the project needs to recover its configuration. Tip If you need to generate some random string, you can use this command: python3 -c \"import random; print(''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!%*+-:;@_') for _ in range(30)))\" API To do so, just copy the .env.default file: cd services/api cp .env.default .env Then replace the values, and in particular the variables for the connection to the database. With docker Generate some random string for DB_USER_LOGIN , DB_USER_PASSWORD , ENGINE_APIKEY and SECRET_KEY Without docker You need to create recofinement database, when you created this one, you must have entered a user who owns this database. DB_USER_LOGIN and DB_USER_PASSWORD variables are its identifiers. Generate some random string for SECRET_KEY and ENGINE_APIKEY . Warning This api uses some external services, and you need to configure them. You will find a guide on their respective pages: Mailjet Spotify TMDB Google Books Anyway, you can use Recofinement without these features, users will simply not be able to receive email nor to link their account to the services mentioned. Engine First, just copy the .env.default file: cd services/reco_engine cp .env.default .env Then replace the values. You only need to set DB_USER_LOGIN , DB_USER_PASSWORD , FLASK_SECRET and API_TOKEN variables. FLASK_SECRET must be a random string (can also use the command above). DB_USER_LOGIN and DB_USER_PASSWORD are the same as those used for the api . API_TOKEN corresponds to the variable ENGINE_APIKEY in the api . Import data Info The database schema is created with the api (with an ORM) Danger Depending on the performance of the machine you are using, this operation may take some time ( several hours ). With docker Build docker image for the database and the api make db-build api-build Start database and api container make db api Import data make import-data If you want to see logs make logs Without docker Make sure that the database service is running ( with a recofinement database created ). Let's create the database schema: cd services/api make init make db-update cd ../.. Edit the importation script: cd datas # Replace \"<pwd>\" by the current absolute path (important!) sed -i \"s#FROM '#FROM '<pwd>#g\" script.sql Execute this script on your database Usage With docker Usually Docker uses the default 172.17.0.1/16 subnet for container networking. If you use Windows You may write the following line into .env file (This is the ip used to access the docker hub). DOCKER_IP=192.168.56.10 Build docker image from sources (all services) make build Start the container (all services) make start Display logs from the running container (all services) make logs Stop the container (all services) make stop Destroy the container (all services) make rm You can also do each action for one service using: ## (Re)start 'api' service only (also available: 'api-[build|logs|sh|stop|rm]) make api ## (Re)start 'engine' service only (also available: 'engine-[build|logs|sh|stop|rm]) make engine ## (Re)start 'cron' service only (also available: 'cron-[build|logs|sh|stop|rm]) make cron ## (Re)start 'db' service only (also available: 'db-[build|logs|sh|stop|rm]) make db ## (Re)start 'front' service only (also available: 'front-[build|logs|sh|stop|rm]) make front ## (Re)start 'nginx' service only (also available: 'nginx-[build|logs|sh|stop|rm]) make nginx Without docker UI Service: Install dependencies make init Serve locally the development build (with hot-reloads) make serve # or ng serve API Service: Install dependencies make init Update database to the last migration (or initialize it if it does not exist) make db-update Serve locally the development build make serve Engine Service: Install dependencies make init Serve locally the development build make serve Tip If you want to know more about the available orders and how you can contribute to the project, we invite you to look at the 'README.md' files of each repository. You can access it by clicking on the github button at the top right of this site. Add the admin role to a user Important It is preferable to have imported the data beforehand ( see here ) and to have created a user ( register ). With docker Connect to your db container make db-sh Connect to the db psql -d <db_name> -U <user_name> Find your user_id SELECT user_id from public.user WHERE email = '<your email>'; Add the admin role INSERT INTO public.user_role VALUES (<user_id>, 2); Without docker Connect to the db psql -d <db_name> -U <user_name> Find your user_id SELECT user_id from public.user WHERE email = '<your email>'; Add the admin role INSERT INTO public.user_role VALUES (<user_id>, 2);","title":"Installation"},{"location":"developers/installation/#production-environment","text":"In a production environment, all you need is a docker. We advise you to use this environment in the following cases: To deploy the application on a server To test the application locally (in your computer) To contribute to the project To test services independently of the full application","title":"Production environment"},{"location":"developers/installation/#development-environment","text":"In a development environment, there will be several dependencies to install. We advise you to use this environment in the following cases: To contribute to the project with hot reloading If you want to access the database via an interface If you are on Windows and you don't want to use our solution: https://github.com/RomainCtl/vagrant_docker (more information in the guide)","title":"Development environment"},{"location":"developers/installation/#requirements","text":"Production environment In order to be able to deploy, test or make changes to the application, you must have the necessary tools to run the application. make git & git lfs (Large File Storage) docker & docker-compose and that's all! Linux (Debian) make is normally installed by default. Install git and git-lfs : apt install git git-lfs git lfs install You can install docker simply with: apt install docker.io docker-compose Windows Download git from here and follow the instruction. Download git lfs from here and: git lfs install If you work on windows, I advise you to follow the instructions in this repository: https://github.com/RomainCtl/vagrant_docker So, each time you will use docker, you may start the vm ( make vm-up ). Note An Oracle VM Virtualbox will start and you will see it, you do not need to log on to it. The author of this repository chose to leave the VM window open to do not forget to switch it off before turning off the computer. Tip To use docker, do not forget to define the environment variables as the following: ./setenv-docker.bat . Mac For make , you will have to install the \"Developer Tools\" that are provided as optional packages in OS X installation disks. git is normally installed by default, try: git --version on your terminal, if it is not already installed, it will ask you to do so. Install git-lfs : brew install git-lfs git lfs install Docker Compose is installed as part of Docker for Mac . So you only have to install Docker for MAC. Development environment Warning This guide may not work on your environment, if this is the case, please refer to the official sites of the outbuildings. This guide is only intended to help you with the installation, but not with the configuration of the dependencies. In order to be able to make changes to the application or to access the database via an interface, you must have the necessary tools to run the application. make git & git lfs (Large File Storage) python >=3.8, pip and pipenv npm postgresql >=10 java >=11 Linux (Debian) make is normally installed by default. Install git and git-lfs : apt install git git-lfs git lfs install Python 3.8, pip & pipenv apt install python3.8 python3-pip python3 -m pip install pipenv Tip If you have more than one version of Python installed on your machine, the python3 command may execute a different version, See : https://jcutrer.com/linux/upgrade-python37-ubuntu1810 (taking into account the desired version). Npm apt install nodejs PostgreSQL apt install postgresql postgresql-client Java apt install openjdk-11-jre Windows Important We advise you to install: Choco , software management for windows Cmder , it is a command-line tool, it allows to replace advantageously cmd provided by default by Windows. Make choco install -y make Download git from here and follow the instruction. Download git lfs from here and: git lfs install Python3.8 https://www.python.org/downloads/windows/ , do not forget to tick the box \"add to path\". Npm, included with NodeJS https://nodejs.org/en/download/ PostgreSQL https://www.postgresql.org/download/ Java https://www.oracle.com/java/technologies/javase-jdk11-downloads.html Mac For make , you will have to install the \"Developer Tools\" that are provided as optional packages in OS X installation disks. git is normally installed by default, try: git --version on your terminal, if it is not already installed, it will ask you to do so. Install git-lfs : brew install git-lfs git lfs install Python 3.8 https://www.python.org/downloads/mac-osx/ Npm, included with NodeJS https://nodejs.org/en/download/ PostgreSQL https://www.postgresql.org/download/ Java https://www.oracle.com/java/technologies/javase-jdk11-downloads.html","title":"Requirements"},{"location":"developers/installation/#clone-project","text":"We use a micro-service architecture ( more information in this section ). We have a \"master project\" which has all services as sub-modules. Clone the \"master project\" and follow these commands: git clone https://github.com/RomainCtl/RecoFinement.git Imports git submodule (services) make init Import our data (may take some time depending on your internet connection) cd ./datas git lfs pull cd ..","title":"Clone project"},{"location":"developers/installation/#environment-variables","text":"In order to run correctly, the project needs to recover its configuration. Tip If you need to generate some random string, you can use this command: python3 -c \"import random; print(''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!%*+-:;@_') for _ in range(30)))\"","title":"Environment variables"},{"location":"developers/installation/#api","text":"To do so, just copy the .env.default file: cd services/api cp .env.default .env Then replace the values, and in particular the variables for the connection to the database. With docker Generate some random string for DB_USER_LOGIN , DB_USER_PASSWORD , ENGINE_APIKEY and SECRET_KEY Without docker You need to create recofinement database, when you created this one, you must have entered a user who owns this database. DB_USER_LOGIN and DB_USER_PASSWORD variables are its identifiers. Generate some random string for SECRET_KEY and ENGINE_APIKEY . Warning This api uses some external services, and you need to configure them. You will find a guide on their respective pages: Mailjet Spotify TMDB Google Books Anyway, you can use Recofinement without these features, users will simply not be able to receive email nor to link their account to the services mentioned.","title":"API"},{"location":"developers/installation/#engine","text":"First, just copy the .env.default file: cd services/reco_engine cp .env.default .env Then replace the values. You only need to set DB_USER_LOGIN , DB_USER_PASSWORD , FLASK_SECRET and API_TOKEN variables. FLASK_SECRET must be a random string (can also use the command above). DB_USER_LOGIN and DB_USER_PASSWORD are the same as those used for the api . API_TOKEN corresponds to the variable ENGINE_APIKEY in the api .","title":"Engine"},{"location":"developers/installation/#import-data","text":"Info The database schema is created with the api (with an ORM) Danger Depending on the performance of the machine you are using, this operation may take some time ( several hours ). With docker Build docker image for the database and the api make db-build api-build Start database and api container make db api Import data make import-data If you want to see logs make logs Without docker Make sure that the database service is running ( with a recofinement database created ). Let's create the database schema: cd services/api make init make db-update cd ../.. Edit the importation script: cd datas # Replace \"<pwd>\" by the current absolute path (important!) sed -i \"s#FROM '#FROM '<pwd>#g\" script.sql Execute this script on your database","title":"Import data"},{"location":"developers/installation/#usage","text":"With docker Usually Docker uses the default 172.17.0.1/16 subnet for container networking. If you use Windows You may write the following line into .env file (This is the ip used to access the docker hub). DOCKER_IP=192.168.56.10 Build docker image from sources (all services) make build Start the container (all services) make start Display logs from the running container (all services) make logs Stop the container (all services) make stop Destroy the container (all services) make rm You can also do each action for one service using: ## (Re)start 'api' service only (also available: 'api-[build|logs|sh|stop|rm]) make api ## (Re)start 'engine' service only (also available: 'engine-[build|logs|sh|stop|rm]) make engine ## (Re)start 'cron' service only (also available: 'cron-[build|logs|sh|stop|rm]) make cron ## (Re)start 'db' service only (also available: 'db-[build|logs|sh|stop|rm]) make db ## (Re)start 'front' service only (also available: 'front-[build|logs|sh|stop|rm]) make front ## (Re)start 'nginx' service only (also available: 'nginx-[build|logs|sh|stop|rm]) make nginx Without docker UI Service: Install dependencies make init Serve locally the development build (with hot-reloads) make serve # or ng serve API Service: Install dependencies make init Update database to the last migration (or initialize it if it does not exist) make db-update Serve locally the development build make serve Engine Service: Install dependencies make init Serve locally the development build make serve Tip If you want to know more about the available orders and how you can contribute to the project, we invite you to look at the 'README.md' files of each repository. You can access it by clicking on the github button at the top right of this site.","title":"Usage"},{"location":"developers/installation/#add-the-admin-role-to-a-user","text":"Important It is preferable to have imported the data beforehand ( see here ) and to have created a user ( register ). With docker Connect to your db container make db-sh Connect to the db psql -d <db_name> -U <user_name> Find your user_id SELECT user_id from public.user WHERE email = '<your email>'; Add the admin role INSERT INTO public.user_role VALUES (<user_id>, 2); Without docker Connect to the db psql -d <db_name> -U <user_name> Find your user_id SELECT user_id from public.user WHERE email = '<your email>'; Add the admin role INSERT INTO public.user_role VALUES (<user_id>, 2);","title":"Add the admin role to a user"},{"location":"developers/external_services/gbooks/","text":"Google books is a service from Google. Books are provided either by publishers and authors through the Google Books Partner Program, additionally, Google has partnered with a number of magazine publishers to digitize their archives. The user can link his tmdb account to Recofinement. What is used Recofinement retrieves on each connection: the books with which the user has interacted (text review and/or rating) How to enable this feature To make these features work, you can follow this guide: Get a Google account: https://www.google.com/accounts/NewAccount Register your application (Recofinement) using the Google API Console Activate the Books API int the Google API Console Open the Credential page in the API Console if necessary, configure the authorisation screen (Called \"Oauth Consent screen\") On the Credential page, click on \"Create credentials\" - \"OAuth Client ID\" Still on Credential page, on the \"ID clients OAuth 2.0\" section, you may find an OAuth client (the one you created), click on the download button to download the \"oauth file\" Hint You must define the following variable in the .env file of the API . PATH_TO_GOOGLE_OAUTH_FILE=<PATH_TO_GOOGLE_OAUTH_FILE> See more in the installation guide","title":"Google Books"},{"location":"developers/external_services/gbooks/#what-is-used","text":"Recofinement retrieves on each connection: the books with which the user has interacted (text review and/or rating)","title":"What is used"},{"location":"developers/external_services/gbooks/#how-to-enable-this-feature","text":"To make these features work, you can follow this guide: Get a Google account: https://www.google.com/accounts/NewAccount Register your application (Recofinement) using the Google API Console Activate the Books API int the Google API Console Open the Credential page in the API Console if necessary, configure the authorisation screen (Called \"Oauth Consent screen\") On the Credential page, click on \"Create credentials\" - \"OAuth Client ID\" Still on Credential page, on the \"ID clients OAuth 2.0\" section, you may find an OAuth client (the one you created), click on the download button to download the \"oauth file\" Hint You must define the following variable in the .env file of the API . PATH_TO_GOOGLE_OAUTH_FILE=<PATH_TO_GOOGLE_OAUTH_FILE> See more in the installation guide","title":"How to enable this feature"},{"location":"developers/external_services/mailjet/","text":"Mailjet is a French email marketing platform. It is a cloud-based email delivery and tracking system which allows users to send marketing emails and transactional emails. Why is mailjet used? Recofinement uses mailjet to send e-mails to users, and more specifically in these cases: When creating an account To send a password recovery email How to enable this feature To make these features work, you can follow this guide: Create a Mailjet account Retrieve your API and Secret keys , they will be used to authenticate the application (Recofinement). Hint You must define the following two variables in the .env file of the API . MJ_APIKEY_PUBLIC=<MAILJET_API_KEY> MJ_APIKEY_PRIVATE=<MAILJET_API_SECRET> See more in the installation guide","title":"Mailjet"},{"location":"developers/external_services/mailjet/#why-is-mailjet-used","text":"Recofinement uses mailjet to send e-mails to users, and more specifically in these cases: When creating an account To send a password recovery email","title":"Why is mailjet used?"},{"location":"developers/external_services/mailjet/#how-to-enable-this-feature","text":"To make these features work, you can follow this guide: Create a Mailjet account Retrieve your API and Secret keys , they will be used to authenticate the application (Recofinement). Hint You must define the following two variables in the .env file of the API . MJ_APIKEY_PUBLIC=<MAILJET_API_KEY> MJ_APIKEY_PRIVATE=<MAILJET_API_SECRET> See more in the installation guide","title":"How to enable this feature"},{"location":"developers/external_services/spotify/","text":"Spotify is an audio streaming and media services provider. Recofinement uses spotify to listen to music , but also to retrieve user preferences . The user can link his spotify account to Recofinement. What is used Recofinement retrieves on each connection: the top 20 music listened to by the user, the last 20 pieces of music listened to, the music from the first 20 playlists How to enable this feature To make these features work, you can follow this guide: Create a Spotify user account (Premium or Free). To do that, simply sign up at http://www.spotify.com/ Register your application (Recofinement) at Register app page and retrieve your client id and client secret . Hint You must define the following two variables in the .env file of the API . SPOTIFY_CLIENT_ID=<SPOTIFY_CLIENT_ID> SPOTIFY_CLIENT_SECRET=<SPOTIFY_CLIENT_SECRET> See more in the installation guide","title":"Spotify"},{"location":"developers/external_services/spotify/#what-is-used","text":"Recofinement retrieves on each connection: the top 20 music listened to by the user, the last 20 pieces of music listened to, the music from the first 20 playlists","title":"What is used"},{"location":"developers/external_services/spotify/#how-to-enable-this-feature","text":"To make these features work, you can follow this guide: Create a Spotify user account (Premium or Free). To do that, simply sign up at http://www.spotify.com/ Register your application (Recofinement) at Register app page and retrieve your client id and client secret . Hint You must define the following two variables in the .env file of the API . SPOTIFY_CLIENT_ID=<SPOTIFY_CLIENT_ID> SPOTIFY_CLIENT_SECRET=<SPOTIFY_CLIENT_SECRET> See more in the installation guide","title":"How to enable this feature"},{"location":"developers/external_services/tmdb/","text":"TMDB (The Movie Database) is a community built movie and TV database. The user can link his tmdb account to Recofinement. What is used Recofinement retrieves on each connection: Get user favorite movies and series Get user rated movies and series Get user created list How to enable this feature To make these features work, you can follow this guide: Recofinement can only use the third version of the TMDB api. Create an account at https://www.themoviedb.org/ Register for an API key, click the API link Hint You must define the following variable in the .env file of the API . TMDB_CLIENT_TOKEN=<TMDB_CLIENT_TOKEN> See more in the installation guide","title":"TMDB"},{"location":"developers/external_services/tmdb/#what-is-used","text":"Recofinement retrieves on each connection: Get user favorite movies and series Get user rated movies and series Get user created list","title":"What is used"},{"location":"developers/external_services/tmdb/#how-to-enable-this-feature","text":"To make these features work, you can follow this guide: Recofinement can only use the third version of the TMDB api. Create an account at https://www.themoviedb.org/ Register for an API key, click the API link Hint You must define the following variable in the .env file of the API . TMDB_CLIENT_TOKEN=<TMDB_CLIENT_TOKEN> See more in the installation guide","title":"How to enable this feature"},{"location":"developers/services/api/","text":"See the repository This service is the BackEnd. It is the brain of the application, responsible for managing user access and actions. We choose to use JWT (Json Web Token) for the authentification. When the user successfully logs in using their credentials, a JWT will be returned. The returned token is signed using a private secret. We have chosen to use bcrypt to store passwords. It is a password hashing function based on blowfish cipher. It incorporate a salt to protect against rainbow table attacks. It is resistant to brute-force search attacks even with increasing computation power. Techonologies We use Flask web framework, it is a micro framework written in Python. It is classified as a micro framework because it does not require specific tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. However, Flask supports extensions that can add application features as if they were implemented in Flask itself. Flask documentation Used Flask Extensions Note Here you can find a description of each flask extension we use. Flask Restx The official documentation can be found at flask-restx . Flask-Restx is an extension for Flask that adds support for quickly building REST APIs. It encourages best practices with minimal setup. Flask-Restx expose a swagger documentation properly. Flask SQLAlchemy The official documentation can be found at flask-sqlachemy . Flask-SQLAlchemy is an extension that adds support for SQLAlchemy to our application. It aims to simplify using SQLAlchemy with Flask. SQLALchemy is an object relational mapper (ORM), See flask-sqlalchemy documentation to see how to work with the ORM in depth. Flask Marshmallow The official documentation can be found at flask-marshmallow . Flask-Marshmallow is a thin integration layer for Flask and marshmallow (an object serialization/deserialization library). It also integrates with Flask-SQLAlchemy. Here a link to the official Marshmallow documentation . Flask Bcrypt The official documentation can be found at flask-brcypt . Flask-Bcrypt is a Flask extension that provides bcrypt hashing utilities for your application. You will find more information about Bcrypt here Flask Cors The official documentation can be found at flask-cors . Flask cors is a Flask extension for handling Cross Origin Resource Sharing (CORS), making cross-origin AJAX possible. You will find more information about CORS in Mozilla developer doc . Flask JWT extended The official documentation can be found at flask-jwt-extende . Flask JWT extended is an open source Flask extension that provides JWT support. You will find more information about JWT in official JWT website . Api Architecture Schema Info We use external services to send mail and to link user accounts, more information here . Event sourcing With the objective of improving our recommendation engine, we had the idea to launch only what is needed. And to know what is necessary, it is necessary to have a history of the different actions that have been performed between two launches of a recommendation algorithm. That's why we have implemented the \"event sourcing\" pattern in our api. We store media additions, modifications and deletions. And we store the additions and modifications of interactions between content and users. We have several types of events, but they all have the same basis : Name Type Description id Integer Unique identifier occured_at DateTime date of the event occured_by Integer id or null object_id Integer event is related to this object A DeletionEvent has the same base, and moreover : Name Type Description ... ... ... model_name String name of the model where the event occured A ChangedEvent has the same base, and moreover : Name Type Description ... ... ... model_name String name of the model where the event occured attribute_name String name of the attribute of the model new_value String name value for this attribute A ApplicationAddedEvent has the same base, and moreover : Name Type Description ... ... ... name String app name size String installs String type String price String content_rating String last_updated String current_version String android_version String cover String Important All ApplicationAddedEvent , BookAddedEvent , EpisodeAddedEvent , GameAddedEvent , MovieAddedEvent , SerieAddedEvent , TrackAddedEvent , MetaAddedEvent have the same base, plus there own atributes that you can find in Database page.","title":"API"},{"location":"developers/services/api/#techonologies","text":"We use Flask web framework, it is a micro framework written in Python. It is classified as a micro framework because it does not require specific tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. However, Flask supports extensions that can add application features as if they were implemented in Flask itself. Flask documentation","title":"Techonologies"},{"location":"developers/services/api/#used-flask-extensions","text":"Note Here you can find a description of each flask extension we use.","title":"Used Flask Extensions"},{"location":"developers/services/api/#flask-restx","text":"The official documentation can be found at flask-restx . Flask-Restx is an extension for Flask that adds support for quickly building REST APIs. It encourages best practices with minimal setup. Flask-Restx expose a swagger documentation properly.","title":"Flask Restx"},{"location":"developers/services/api/#flask-sqlalchemy","text":"The official documentation can be found at flask-sqlachemy . Flask-SQLAlchemy is an extension that adds support for SQLAlchemy to our application. It aims to simplify using SQLAlchemy with Flask. SQLALchemy is an object relational mapper (ORM), See flask-sqlalchemy documentation to see how to work with the ORM in depth.","title":"Flask SQLAlchemy"},{"location":"developers/services/api/#flask-marshmallow","text":"The official documentation can be found at flask-marshmallow . Flask-Marshmallow is a thin integration layer for Flask and marshmallow (an object serialization/deserialization library). It also integrates with Flask-SQLAlchemy. Here a link to the official Marshmallow documentation .","title":"Flask Marshmallow"},{"location":"developers/services/api/#flask-bcrypt","text":"The official documentation can be found at flask-brcypt . Flask-Bcrypt is a Flask extension that provides bcrypt hashing utilities for your application. You will find more information about Bcrypt here","title":"Flask Bcrypt"},{"location":"developers/services/api/#flask-cors","text":"The official documentation can be found at flask-cors . Flask cors is a Flask extension for handling Cross Origin Resource Sharing (CORS), making cross-origin AJAX possible. You will find more information about CORS in Mozilla developer doc .","title":"Flask Cors"},{"location":"developers/services/api/#flask-jwt-extended","text":"The official documentation can be found at flask-jwt-extende . Flask JWT extended is an open source Flask extension that provides JWT support. You will find more information about JWT in official JWT website .","title":"Flask JWT extended"},{"location":"developers/services/api/#api-architecture-schema","text":"Info We use external services to send mail and to link user accounts, more information here .","title":"Api Architecture Schema"},{"location":"developers/services/api/#event-sourcing","text":"With the objective of improving our recommendation engine, we had the idea to launch only what is needed. And to know what is necessary, it is necessary to have a history of the different actions that have been performed between two launches of a recommendation algorithm. That's why we have implemented the \"event sourcing\" pattern in our api. We store media additions, modifications and deletions. And we store the additions and modifications of interactions between content and users. We have several types of events, but they all have the same basis : Name Type Description id Integer Unique identifier occured_at DateTime date of the event occured_by Integer id or null object_id Integer event is related to this object A DeletionEvent has the same base, and moreover : Name Type Description ... ... ... model_name String name of the model where the event occured A ChangedEvent has the same base, and moreover : Name Type Description ... ... ... model_name String name of the model where the event occured attribute_name String name of the attribute of the model new_value String name value for this attribute A ApplicationAddedEvent has the same base, and moreover : Name Type Description ... ... ... name String app name size String installs String type String price String content_rating String last_updated String current_version String android_version String cover String Important All ApplicationAddedEvent , BookAddedEvent , EpisodeAddedEvent , GameAddedEvent , MovieAddedEvent , SerieAddedEvent , TrackAddedEvent , MetaAddedEvent have the same base, plus there own atributes that you can find in Database page.","title":"Event sourcing"},{"location":"developers/services/engine/","text":"See the repository This service is the one who calculates the recommendations for the users. In production environement, this service uses a cron (also known has cront job). A cron is a time-based job scheduler un Unix-like computer operating systems. This cron will send a request to this service to refresh recommendations. Eeah recommendation algorithme can now be launch alone, to fit the need of the sandbox. Processing of a request We will explain how a request is processed in Recofinement-engine. Below is an explanatory diagram. Engine We use several algorithms to recommend users. Popularity The main purpose of this engine it to set a popularity score for each media. We use the IMDB top-250 formula. This formula gives a true Bayesian estimate : weighted rating (WR) = (v / (v+m)) * R + (m / (v+m)) * C With: R = average rating for the media (mean) v = number of votes (rating) for the media m = minimum votes (number of rating) required to be listed C = the mean vote across the whole report. Content similarity The main purpose of this engine is to define similar items for a particular item. To do this, we use all word we can find in media fields, and we create a \"soup\" of it. i.e. a field containing all the words found. From this, we can create a dictionary of the vocabulary used. And of courses, we do not take the 'this', 'is', 'a', ... words for this dictionary. Then, we construct a TF-IDF (term frequency\u2013inverse document frequency) matrix. It is a numerical statistic that is intended to reflect how important a word is in a collection. Lastly, we define a score between each item using cosinus similarity . It is a measure of similarity between two vectors, it is defined to equal the cosine of the angle between them. Create link between items Natively, we have no link between different types of content. So we decided to create a link between the following content: movies: series, books series: movies, books music: series, movies game : movies, series books : None applications: None There is no database linking items from different media. So we can only link item with the title . We use the same algorithm that for the Content similarity engine, but we only use the title attribute. Content-base filtering The following two systems use what the user already likes (explicitly and/or implicitly) to recommend content to the user. From profile The main purpose it to recommend items based on the profile of a user or a group. It is the construction of the genre of \"liked\" item + explicit liked genres. We use explicit and implicit data to make recommendations with this engine (see all metadata between a user and a content here ). You will notice that each media has its own meta data. For the sake of simplification, we only use commons field, so rating (explicit) and review_see_count (implicit). The first step is to retrieve all user (we exclude anonymous users retrieved from datasets). For each of these users, we retrieve its 'liked' contents (those he/she noted , and those he/she watched ). Knowing that each media is linked to a list of genres, with this list of content, we can create the \"genre\" profile for a user. To be more specific, we turn each genre into weights and we take into account explicit user interests . With the input's profile and the complete list of media and their genres in hand, we are going to take the weighted average of every media based on the input profile and recommend the top media that most satisfy it (increased to 200 media). Note This engine is not used for Application because an application is linked to only one genre, and for Book because we do not have data allowing us to define its genre(s). From similar content The main purpose of this engine is to recommend similar items based on the user \"liked\" content. As with From profile , we retrieve users and his/her 'liked' content (only if rating is higher than 3). From this list, we recover their similar content. The more an item is liked, the more its similar contents will have a high score. Collaborative filtering Alternating Least Squares The main purpose of this engine is to recommend items based on similar users' preferences. The first step is to recover all user-item-rating tuples. This is why it is the most resource-intensive engine (due to size of data). This engine does not use User-based or Item-based approach, but Alternating Least Squares (ALS) approach. ALS matrix factorisation attemps to estimate the ratings matrix R as the product of two lower-rank matrices, X and Y, i.e. X * Yt = R, with t as a parameter defined by the model. Typically these approximations are called 'factor' matrices . The general approach is iterative. During each iteration, one of the factor matrices is held constant, while the other is solved for using least squares. The newly-solved factor matrix is then held constant while solving for the other factor matrix. So, with these metadata, we build an ALS model and fitting data. Lastly, we make recommendations based on our model, with 10 recommendations for all selected user. Refreshment of recommendations We use crons to launch tasks. Popularity one time a day at 2 am Content similarities one time a day at 3 am Link between items one time a day at 4 am Collaborative filtering every 6 hours at 0min From profile every 2 hours at 20min From similar content every 2 hours at 50min From profile for group every 12 hours at 0min From similar content for group every 12 hours at 59min For each of the algorithms described above, we check whether it is really necessary to run them. Thanks to the sourcing event set up in the api ( here ), we can know if there have been new interactions, or the addition of new content requiring refreshment. Note Algorithms, which are also costly in terms of resources, are never launched for nothing.","title":"Recommendation Engine"},{"location":"developers/services/engine/#processing-of-a-request","text":"We will explain how a request is processed in Recofinement-engine. Below is an explanatory diagram.","title":"Processing of a request"},{"location":"developers/services/engine/#engine","text":"We use several algorithms to recommend users.","title":"Engine"},{"location":"developers/services/engine/#popularity","text":"The main purpose of this engine it to set a popularity score for each media. We use the IMDB top-250 formula. This formula gives a true Bayesian estimate : weighted rating (WR) = (v / (v+m)) * R + (m / (v+m)) * C With: R = average rating for the media (mean) v = number of votes (rating) for the media m = minimum votes (number of rating) required to be listed C = the mean vote across the whole report.","title":"Popularity"},{"location":"developers/services/engine/#content-similarity","text":"The main purpose of this engine is to define similar items for a particular item. To do this, we use all word we can find in media fields, and we create a \"soup\" of it. i.e. a field containing all the words found. From this, we can create a dictionary of the vocabulary used. And of courses, we do not take the 'this', 'is', 'a', ... words for this dictionary. Then, we construct a TF-IDF (term frequency\u2013inverse document frequency) matrix. It is a numerical statistic that is intended to reflect how important a word is in a collection. Lastly, we define a score between each item using cosinus similarity . It is a measure of similarity between two vectors, it is defined to equal the cosine of the angle between them.","title":"Content similarity"},{"location":"developers/services/engine/#create-link-between-items","text":"Natively, we have no link between different types of content. So we decided to create a link between the following content: movies: series, books series: movies, books music: series, movies game : movies, series books : None applications: None There is no database linking items from different media. So we can only link item with the title . We use the same algorithm that for the Content similarity engine, but we only use the title attribute.","title":"Create link between items"},{"location":"developers/services/engine/#content-base-filtering","text":"The following two systems use what the user already likes (explicitly and/or implicitly) to recommend content to the user.","title":"Content-base filtering"},{"location":"developers/services/engine/#from-profile","text":"The main purpose it to recommend items based on the profile of a user or a group. It is the construction of the genre of \"liked\" item + explicit liked genres. We use explicit and implicit data to make recommendations with this engine (see all metadata between a user and a content here ). You will notice that each media has its own meta data. For the sake of simplification, we only use commons field, so rating (explicit) and review_see_count (implicit). The first step is to retrieve all user (we exclude anonymous users retrieved from datasets). For each of these users, we retrieve its 'liked' contents (those he/she noted , and those he/she watched ). Knowing that each media is linked to a list of genres, with this list of content, we can create the \"genre\" profile for a user. To be more specific, we turn each genre into weights and we take into account explicit user interests . With the input's profile and the complete list of media and their genres in hand, we are going to take the weighted average of every media based on the input profile and recommend the top media that most satisfy it (increased to 200 media). Note This engine is not used for Application because an application is linked to only one genre, and for Book because we do not have data allowing us to define its genre(s).","title":"From profile"},{"location":"developers/services/engine/#from-similar-content","text":"The main purpose of this engine is to recommend similar items based on the user \"liked\" content. As with From profile , we retrieve users and his/her 'liked' content (only if rating is higher than 3). From this list, we recover their similar content. The more an item is liked, the more its similar contents will have a high score.","title":"From similar content"},{"location":"developers/services/engine/#collaborative-filtering","text":"","title":"Collaborative filtering"},{"location":"developers/services/engine/#alternating-least-squares","text":"The main purpose of this engine is to recommend items based on similar users' preferences. The first step is to recover all user-item-rating tuples. This is why it is the most resource-intensive engine (due to size of data). This engine does not use User-based or Item-based approach, but Alternating Least Squares (ALS) approach. ALS matrix factorisation attemps to estimate the ratings matrix R as the product of two lower-rank matrices, X and Y, i.e. X * Yt = R, with t as a parameter defined by the model. Typically these approximations are called 'factor' matrices . The general approach is iterative. During each iteration, one of the factor matrices is held constant, while the other is solved for using least squares. The newly-solved factor matrix is then held constant while solving for the other factor matrix. So, with these metadata, we build an ALS model and fitting data. Lastly, we make recommendations based on our model, with 10 recommendations for all selected user.","title":"Alternating Least Squares"},{"location":"developers/services/engine/#refreshment-of-recommendations","text":"We use crons to launch tasks. Popularity one time a day at 2 am Content similarities one time a day at 3 am Link between items one time a day at 4 am Collaborative filtering every 6 hours at 0min From profile every 2 hours at 20min From similar content every 2 hours at 50min From profile for group every 12 hours at 0min From similar content for group every 12 hours at 59min For each of the algorithms described above, we check whether it is really necessary to run them. Thanks to the sourcing event set up in the api ( here ), we can know if there have been new interactions, or the addition of new content requiring refreshment. Note Algorithms, which are also costly in terms of resources, are never launched for nothing.","title":"Refreshment of recommendations"},{"location":"developers/services/nginx/","text":"Nginx is an off-the-shelf tool that is used by all of Recofinement's micro-services and tools. It allows you to set up personalised urls for Recofinement services. Operating mode Nginx is an off-the-shelf tool, it is not possible to launch it locally in a development mode. It must be launched with docker. Used configuration In the mode of development, the urls of the micro-services have ports to differentiate them. For example, UI service uses port 80 (or 4200 for the non-build version), API service uses the port 4040 and Engine service uses the port 4041. With Nginx , you can only access to the UI service and the API service services ( Engine service is not accessible from the outside) from the url <host>/recofinement for the UI and from <host>/api for the API .","title":"Nginx"},{"location":"developers/services/nginx/#operating-mode","text":"Nginx is an off-the-shelf tool, it is not possible to launch it locally in a development mode. It must be launched with docker.","title":"Operating mode"},{"location":"developers/services/nginx/#used-configuration","text":"In the mode of development, the urls of the micro-services have ports to differentiate them. For example, UI service uses port 80 (or 4200 for the non-build version), API service uses the port 4040 and Engine service uses the port 4041. With Nginx , you can only access to the UI service and the API service services ( Engine service is not accessible from the outside) from the url <host>/recofinement for the UI and from <host>/api for the API .","title":"Used configuration"},{"location":"developers/services/ui/","text":"See the repository This service is the entrance door for users, it is the interface that will allow them to use the entire application. It must represent the graphical identity of the application. See You can see the user part of this documentation for more information. Technologies We use Angular , it is a TypeScript-based open-source web application framework led by the Angular Team at Google and by a community of individuals and corporations. We use Material Design components for Angular : Material Angular to simplify UI components creation. For style, we use Angular Boostrap , it is an angular widget using only Bootstrap 4 CSS. Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. UI Architecture Schema","title":"User Interface"},{"location":"developers/services/ui/#technologies","text":"We use Angular , it is a TypeScript-based open-source web application framework led by the Angular Team at Google and by a community of individuals and corporations. We use Material Design components for Angular : Material Angular to simplify UI components creation. For style, we use Angular Boostrap , it is an angular widget using only Bootstrap 4 CSS. Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development.","title":"Technologies"},{"location":"developers/services/ui/#ui-architecture-schema","text":"","title":"UI Architecture Schema"},{"location":"developers/services/admin_panel/additional_content/","text":"Validate content The sandbox allow administrator to add media content to the database. The administrator can validate the addition of the content to the database, or he can refuse it and the additional content will be deleted. The admin need validate_media permission to effectuate this action. Additional media content are different from basic content. Application Name Type Description app_id Integer Application identifier name String Application name size String Application size installs String Number of installations by unique users type String 'Paid' or 'Free' price String Price content_rating String application classification (by age group) last_updated String last update date current_version String current app version number android_version String minimum android version required cover String cover url Book Name Type Description book_id Integer Additional book identifier isbn String Book universal identifier title String Book title author String Book author year_of_publication Integer Year of publication publisher String Publisher company image_url_s String URL for small image size image_url_m String URL for medium image size image_url_l String URL for large image size Episode Name Type Description episode_id Integer Episode identifier imdbid String IMDB identifier title String year Integer release year season_number Integer episode_number Integer serie_id Integer Serie identifier Game Name Type Description game_id Integer Game identifier steamid Integer Steam game identifier name String Game name short_description Text header_image String website String URL of official game website developers String developers company name publishers String publisher company name price String release_date String Movie Name Type Description movie_id Integer Movie identifier title String Movie title language String Main language actors String List of main actors separated by '|' year String Release year producers String List of producers separated by '|' director String Name of the director writer String Name of the writer imdbid String IMDB movie identifier tmdbid String TMDB movie identifier cover String Cover url plot_outline String synopsis Serie Name Type Description serie_id Integer Serie identifier imdbid String IMDB identifier title String start_year Integer end_year Integer writers Text List of writers separated by ',' directors Text List of directors separated by ',' actors Text List of actors separated by ',' cover String Cover url plot_outline String synopsis Track Name Type Description track_id Integer Track identifier title String Track title year Integer Release year artist_name String Artist name release String Realse (album) associated with this track track_mmid String Million Song track identifier recording_mbid UUID MusicBrainz track identifier spotify_id String Track spotify id covert_art_url Text","title":"Additional Content"},{"location":"developers/services/admin_panel/additional_content/#validate-content","text":"The sandbox allow administrator to add media content to the database. The administrator can validate the addition of the content to the database, or he can refuse it and the additional content will be deleted. The admin need validate_media permission to effectuate this action. Additional media content are different from basic content.","title":"Validate content"},{"location":"developers/services/admin_panel/additional_content/#application","text":"Name Type Description app_id Integer Application identifier name String Application name size String Application size installs String Number of installations by unique users type String 'Paid' or 'Free' price String Price content_rating String application classification (by age group) last_updated String last update date current_version String current app version number android_version String minimum android version required cover String cover url","title":"Application"},{"location":"developers/services/admin_panel/additional_content/#book","text":"Name Type Description book_id Integer Additional book identifier isbn String Book universal identifier title String Book title author String Book author year_of_publication Integer Year of publication publisher String Publisher company image_url_s String URL for small image size image_url_m String URL for medium image size image_url_l String URL for large image size","title":"Book"},{"location":"developers/services/admin_panel/additional_content/#episode","text":"Name Type Description episode_id Integer Episode identifier imdbid String IMDB identifier title String year Integer release year season_number Integer episode_number Integer serie_id Integer Serie identifier","title":"Episode"},{"location":"developers/services/admin_panel/additional_content/#game","text":"Name Type Description game_id Integer Game identifier steamid Integer Steam game identifier name String Game name short_description Text header_image String website String URL of official game website developers String developers company name publishers String publisher company name price String release_date String","title":"Game"},{"location":"developers/services/admin_panel/additional_content/#movie","text":"Name Type Description movie_id Integer Movie identifier title String Movie title language String Main language actors String List of main actors separated by '|' year String Release year producers String List of producers separated by '|' director String Name of the director writer String Name of the writer imdbid String IMDB movie identifier tmdbid String TMDB movie identifier cover String Cover url plot_outline String synopsis","title":"Movie"},{"location":"developers/services/admin_panel/additional_content/#serie","text":"Name Type Description serie_id Integer Serie identifier imdbid String IMDB identifier title String start_year Integer end_year Integer writers Text List of writers separated by ',' directors Text List of directors separated by ',' actors Text List of actors separated by ',' cover String Cover url plot_outline String synopsis","title":"Serie"},{"location":"developers/services/admin_panel/additional_content/#track","text":"Name Type Description track_id Integer Track identifier title String Track title year Integer Release year artist_name String Artist name release String Realse (album) associated with this track track_mmid String Million Song track identifier recording_mbid UUID MusicBrainz track identifier spotify_id String Track spotify id covert_art_url Text","title":"Track"},{"location":"developers/services/admin_panel/profile/","text":"Create a profile Profiles are user like element easy to create and to delete, used to test recommendation algorithms of the application. The profiles are linked to an administrator, who can modify their preferences and the content they like. Profile structure Name Type Description profile_id Integer Visible profile identifier uuid UUID profile identifier profilename String Profile name user_id Integer User id of profile creator Create recommendation for this profile Profile recommendations are created on-the-fly to be displayed as fast as possible. This recommendations are affacted by user's one, but user's one are not affected by profile recommendations. They are made only with faststr algorithm : Profile algorithm Similar Content algorithm","title":"Profile"},{"location":"developers/services/admin_panel/profile/#create-a-profile","text":"Profiles are user like element easy to create and to delete, used to test recommendation algorithms of the application. The profiles are linked to an administrator, who can modify their preferences and the content they like.","title":"Create a profile"},{"location":"developers/services/admin_panel/profile/#profile-structure","text":"Name Type Description profile_id Integer Visible profile identifier uuid UUID profile identifier profilename String Profile name user_id Integer User id of profile creator","title":"Profile structure"},{"location":"developers/services/admin_panel/profile/#create-recommendation-for-this-profile","text":"Profile recommendations are created on-the-fly to be displayed as fast as possible. This recommendations are affacted by user's one, but user's one are not affected by profile recommendations. They are made only with faststr algorithm : Profile algorithm Similar Content algorithm","title":"Create recommendation for this profile"},{"location":"users/","text":"Summary The purpose of this part of the documentation is to explain how to use the application. We will describe each element you can find on the interface. Go to Authentication if you want to know how to access the application. Go to Content Visualisation if you want to see each type of content we display on the interface and how to interacte with them. Go to Manage a profile if you want to know how to edit your profile. Go to Administrator if you want to know administrator features.","title":"Home"},{"location":"users/admin/administration_panel/","text":"Administration panel Warn you must have the admin role In this section, you can use the Sandbox and validate a media added by users. To access to the administration panel, please click on \"Admin\" in the navbar The admin have to two specific features : Sandbox is a tool provide to administator to analyse the recommendation engine through profiles created previously. Media validation is a list for user added content waiting for validation.","title":"Administrator Panel"},{"location":"users/admin/administration_panel/#administration-panel","text":"Warn you must have the admin role In this section, you can use the Sandbox and validate a media added by users. To access to the administration panel, please click on \"Admin\" in the navbar The admin have to two specific features : Sandbox is a tool provide to administator to analyse the recommendation engine through profiles created previously. Media validation is a list for user added content waiting for validation.","title":"Administration panel"},{"location":"users/admin/media_validation/","text":"Media validation The admin has a list with all the media added manually by users. He has the power of accept or decline.","title":"Media validation"},{"location":"users/admin/media_validation/#media-validation","text":"The admin has a list with all the media added manually by users. He has the power of accept or decline.","title":"Media validation"},{"location":"users/admin/sandbox/","text":"Sandbox The sandbox is a tool provide to administator to analyse the recommendation engine through profiles created previously. Test profiles The admin can create profiles and attribute it liked genres. Once profile is created, it appears in the \"My profiles\" section. Content of test Info Click on \"+\" to access. This feature allows the admin to add a media which was already in the Recofinement database. Moreover, he can edit it's metadata (the rating, review, count) by clicking directly on the data. Recommendation analysis This feature allows the admin to get an history of each tests done by selecting a date.","title":"Sandbox"},{"location":"users/admin/sandbox/#sandbox","text":"The sandbox is a tool provide to administator to analyse the recommendation engine through profiles created previously.","title":"Sandbox"},{"location":"users/admin/sandbox/#test-profiles","text":"The admin can create profiles and attribute it liked genres. Once profile is created, it appears in the \"My profiles\" section.","title":"Test profiles"},{"location":"users/admin/sandbox/#content-of-test","text":"Info Click on \"+\" to access. This feature allows the admin to add a media which was already in the Recofinement database. Moreover, he can edit it's metadata (the rating, review, count) by clicking directly on the data.","title":"Content of test"},{"location":"users/admin/sandbox/#recommendation-analysis","text":"This feature allows the admin to get an history of each tests done by selecting a date.","title":"Recommendation analysis"},{"location":"users/authentication/sign-in/","text":"How to sign in? After you get registered, the next time you will be willing to access the interface again you will have to sign in. The sign is process requires your e-mail address and your password. In case you forgot your password, you will be able to change it by clicking on I forgot my password button and filling in the e-mail address linked to your account. We will then send you an e-mail with link to recover your password.","title":"Sign in"},{"location":"users/authentication/sign-in/#how-to-sign-in","text":"After you get registered, the next time you will be willing to access the interface again you will have to sign in. The sign is process requires your e-mail address and your password. In case you forgot your password, you will be able to change it by clicking on I forgot my password button and filling in the e-mail address linked to your account. We will then send you an e-mail with link to recover your password.","title":"How to sign in?"},{"location":"users/authentication/sign-up/","text":"How to get registered? First, you land on the login page. If you don't have an account yet you can click on Create an account and you will be redirected to the register form. In order to get registered you need to provide the following information: Email address Pseudo Password Password confirmation Once you have filled up the form you can click on Register. Then, you will have to tell us your preferences regarding each type of media that Recofinement supports. This step allows us to feed our recommendation system. Once this is done, you access the main part the interface.","title":"Register"},{"location":"users/authentication/sign-up/#how-to-get-registered","text":"First, you land on the login page. If you don't have an account yet you can click on Create an account and you will be redirected to the register form. In order to get registered you need to provide the following information: Email address Pseudo Password Password confirmation Once you have filled up the form you can click on Register. Then, you will have to tell us your preferences regarding each type of media that Recofinement supports. This step allows us to feed our recommendation system. Once this is done, you access the main part the interface.","title":"How to get registered?"},{"location":"users/content/add_media/","text":"Add a media All users have the opportunity to submit new content by clicking on the \"+\" at the bottom right corner of your media page. It's important to give as more informations as you can because the most information the application have about a content, the best it can be recommended.","title":"Add a media"},{"location":"users/content/add_media/#add-a-media","text":"All users have the opportunity to submit new content by clicking on the \"+\" at the bottom right corner of your media page. It's important to give as more informations as you can because the most information the application have about a content, the best it can be recommended.","title":"Add a media"},{"location":"users/content/applications/","text":"Under the Applications section you can see your recommended games. You can see more information about a specific application by clicking on the See more button. Then, a pop-up appears and shows the following information: Name Ratings Category Release date Icon Tip You can indicate whether you have downloaded the application or not. Information Giving a rating to an application helps us showing you more relevant content.","title":"Applications"},{"location":"users/content/books/","text":"Under the Books section you can see your recommended games. You can see more information about a specific book by clicking on the See more button. Then, a pop-up appears and shows the following information: Title Ratings Author Publisher ISBN (International Standard Book Number) Year Cover Tip You can indicate whether you have purchased the book or not. Information Giving a rating to a book helps us showing you more relevant content.","title":"Books"},{"location":"users/content/games/","text":"Under the Games section you can see your recommended games. You can see more information about a specific game by clicking on the See more button. Then, a pop-up appears and shows the following information: Name Developer Publisher Price Description Release date Cover Steam You can click on the Steam logo in order to display the game on Steam. Tip You can indicate whether you have purchased the game or not. Information Giving a rating to a game helps us showing you more relevant content.","title":"Games"},{"location":"users/content/games/#steam","text":"You can click on the Steam logo in order to display the game on Steam. Tip You can indicate whether you have purchased the game or not. Information Giving a rating to a game helps us showing you more relevant content.","title":"Steam"},{"location":"users/content/movies/","text":"Under the Movies section you can see your recommended movies. You can see more information about a specific movie by clicking on the See more button. Then, a pop-up appears and shows the following information: Overview Ratings Director Year Genre Cover Staff Actors Directors Writers Tip By connecting your TMDB account you will have access to the movies you liked on this platform in Recofinement . Information Giving a rating to a movie helps us showing you relevant content.","title":"Movies"},{"location":"users/content/musics/","text":"Under the Musics section you can see your recommended musics. When you hover a specific music a play button appears and you can listen to a preview of the music. Tip You can listen to the whole music if you have connected your Spotify account under Profile > Manage a profile > Third-party applications You can see more information about a music by clicking on the See more button. Then, a pop-up appears and shows the following information: Track title Ratings Artist Album cover Information Giving a rating to a music helps us showing you relevant content.","title":"Musics"},{"location":"users/content/search/","text":"On each type of media, you have a search bar. This allows you to search in the entire database so that you can find a specific content that we did not put in the recommended items.","title":"Search content"},{"location":"users/content/series/","text":"Under the Series section you can see your recommended series. You can see more information about a specific series by clicking on the See more button. Then, a pop-up appears and shows the following information: Overview Ratings Years Genre Cover Staff Actors Directors Writers Episodes Episodes you watched List of episodes Tip You can indicate how many episodes your watched so that you can remember your progress. Information Giving a rating to a series helps us showing you relevant content.","title":"Series"},{"location":"users/profile/edit-account/","text":"In this section, you can edit the information you previously entered, export your data and delete your account . Edit your information Here are the things you can change: Username E-mail address Password Export your data If you want to know the data we store, you can click on the Export my data button. A data.json file will be downloaded. Delete your account Once you click on this button, all the information we have concerning your profile will be deleted. Warning Make sure to export your data before you delete your account. Once your account is deleted, we won't be able to retrieve your data.","title":"Edit your account"},{"location":"users/profile/edit-account/#edit-your-information","text":"Here are the things you can change: Username E-mail address Password","title":"Edit your information"},{"location":"users/profile/edit-account/#export-your-data","text":"If you want to know the data we store, you can click on the Export my data button. A data.json file will be downloaded.","title":"Export your data"},{"location":"users/profile/edit-account/#delete-your-account","text":"Once you click on this button, all the information we have concerning your profile will be deleted. Warning Make sure to export your data before you delete your account. Once your account is deleted, we won't be able to retrieve your data.","title":"Delete your account"},{"location":"users/profile/groups/","text":"Creating groups with your friends allows us to recommend you content related to what you friends like. Your groups The groups you created are displayed here. You can invite another Recofinement user to your group. Warning If you leave one of your groups, the group will be deleted! Your friends' groups Here are the groups you have been invited to join by your friends. If the groups appear here, it means you have accepted the invitations. Information You can leave one of your friend's group. This won't affect the group itself. Your invitations In this section, you can see the invitations you sent and received. This allows you to delete an invitation you sent before your friend accept it or accept/decline an invitation that a friend sent to you.","title":"Manage your groups"},{"location":"users/profile/groups/#your-groups","text":"The groups you created are displayed here. You can invite another Recofinement user to your group. Warning If you leave one of your groups, the group will be deleted!","title":"Your groups"},{"location":"users/profile/groups/#your-friends-groups","text":"Here are the groups you have been invited to join by your friends. If the groups appear here, it means you have accepted the invitations. Information You can leave one of your friend's group. This won't affect the group itself.","title":"Your friends' groups"},{"location":"users/profile/groups/#your-invitations","text":"In this section, you can see the invitations you sent and received. This allows you to delete an invitation you sent before your friend accept it or accept/decline an invitation that a friend sent to you.","title":"Your invitations"},{"location":"users/profile/interests/","text":"In this section, you can indicate your interests for each type of media. These pieces of information will help us recommend you more relevant content.","title":"Your interests"},{"location":"users/profile/tpapps/","text":"In this section you can connect to other services in order to access the content you interacted with. Spotify Connecting your Spotify account will allow you to listen to the full musics in th music section. You will also have your listening history displayed in the related section. Once you click on Link my Spotify account , you will be redirected to Spotify website in order to sign in to your account. When this is done you go back to Recofinement's application. Well done, your Spotify account is now linked. The Movie Database Once you click on Link my TMDB account , you will be redirected to TMDB website in order to sign in to your account. When this is done you go back to Recofinement's application. Well done, your TMDB account is now linked. Google Books Once you click on Link my Google Books account , you will be redirected to Google website in order to sign in to your account. When this is done you go back to Recofinement's application. Well done, your Google account is now linked.","title":"Third-party applications"},{"location":"users/profile/tpapps/#spotify","text":"Connecting your Spotify account will allow you to listen to the full musics in th music section. You will also have your listening history displayed in the related section. Once you click on Link my Spotify account , you will be redirected to Spotify website in order to sign in to your account. When this is done you go back to Recofinement's application. Well done, your Spotify account is now linked.","title":"Spotify"},{"location":"users/profile/tpapps/#the-movie-database","text":"Once you click on Link my TMDB account , you will be redirected to TMDB website in order to sign in to your account. When this is done you go back to Recofinement's application. Well done, your TMDB account is now linked.","title":"The Movie Database"},{"location":"users/profile/tpapps/#google-books","text":"Once you click on Link my Google Books account , you will be redirected to Google website in order to sign in to your account. When this is done you go back to Recofinement's application. Well done, your Google account is now linked.","title":"Google Books"}]}